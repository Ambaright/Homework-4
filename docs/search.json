[
  {
    "objectID": "Reading Data with Tidyverse.html",
    "href": "Reading Data with Tidyverse.html",
    "title": "Reading Data with Tidyverse",
    "section": "",
    "text": "In this section I will practice explaining key concepts covered in the class.\n\nIf your working directory is myfolder/homework/, what relative path would you specify to get the file located at myfolder/MyData.csv?\n\nIf our working directory is myfolder/homework/ we know that we are currently in a sub-folder called homework. However, we want to access a file called MyData.csv that is not in the sub-folder and is in the main myfolder folder. To do this we use the relative path ../MyData.csv as the .. takes you up one level from the working directory of myfolder/homework/ to myfolder/.\n\nWhat are the major benefits of using R projects?\n\nWhen working on an analysis we often have quite a few files that could be difficult to manage when working on multiple analysis. R Projects provides a straight forward way to divide up work into multiple contexts. Each project would have it's own working directory, environment, history, and folder strucute.\n\nWhat is git and what is github?\n\nGit is a version control software that is associated with a folder/repo and tracks changes to files. Github is then an online hosting service for Git-based projects. In short, Git is the software that allows us to have version control and repos whereas Github is the online platform that hosts these different Git projects.\n\nWhat are the two main differences between a tibble and a data.frame?\n\nOne of the biggest differences between a tibble and a data.frame is the prining and display of the data. When you print a data.frame you typically print out the entire dataset (up until a certain number of rows and columns). Whereas when printing a tibble you have fancy printing that gives information on the number of observations, the columns, and only shows the first few rows/columns.\nAdditionally, tibbles and data.frames are different when performing any subsetting. Tibbles do not coerce down to a vector when you subset to only one column when using [], instead you end up with another tibble. Whereas, when you subset a data.frame to only one column with [], you typically get a vector. However, it's important to note that if you use $ to subset a tibble, you do coerce to a vector.\n\nRewrite the following nested function call using BaseR’s chaining operator:\n\narrange(filter(select(as_tibble(iris), starts_with(“Petal”), Species), Petal.Length &lt; 1.55), Species)\niris |&gt; as_tibble() |&gt; select(starts_with(\"Petal\"), Species) |&gt; filter(Petal.Length &lt; 1.55) |&gt; arrange(Species)"
  },
  {
    "objectID": "Reading Data with Tidyverse.html#glass-data",
    "href": "Reading Data with Tidyverse.html#glass-data",
    "title": "Reading Data with Tidyverse",
    "section": "Glass Data",
    "text": "Glass Data\nThe first data set is called glass.data. You’ll need to open the raw data set to determine the type of delimiter. The data is available at: https://www4.stat.ncsu.edu/~online/datasets/glass.data.\nWe note that glass.data is delimited by a comma.\n\nRead this data into R directly from the URL using functions from the tidyverse. Notice that the data doesn’t include column names - add those (in a manner of your choosing). Print out the tibble (just call the object name).\n\n\nlibrary(tidyverse)\n\nWarning: package 'tidyverse' was built under R version 4.3.3\n\n\nWarning: package 'ggplot2' was built under R version 4.3.3\n\n\nWarning: package 'tidyr' was built under R version 4.3.3\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nglass_data &lt;- read_delim(\"https://www4.stat.ncsu.edu/online/datasets/glass.data\",\n                         delim = \",\",\n                         col_names = c(\"id\", \"refractive_index\", \"Na\", \"Mg\", \"Al\", \"Si\", \"K\", \"Ca\", \"Ba\", \"Fe\", \"type_of_glass\"))\n\nRows: 214 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (11): id, refractive_index, Na, Mg, Al, Si, K, Ca, Ba, Fe, type_of_glass\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nglass_data\n\n# A tibble: 214 × 11\n      id refractive_index    Na    Mg    Al    Si     K    Ca    Ba    Fe\n   &lt;dbl&gt;            &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1     1             1.52  13.6  4.49  1.1   71.8  0.06  8.75     0  0   \n 2     2             1.52  13.9  3.6   1.36  72.7  0.48  7.83     0  0   \n 3     3             1.52  13.5  3.55  1.54  73.0  0.39  7.78     0  0   \n 4     4             1.52  13.2  3.69  1.29  72.6  0.57  8.22     0  0   \n 5     5             1.52  13.3  3.62  1.24  73.1  0.55  8.07     0  0   \n 6     6             1.52  12.8  3.61  1.62  73.0  0.64  8.07     0  0.26\n 7     7             1.52  13.3  3.6   1.14  73.1  0.58  8.17     0  0   \n 8     8             1.52  13.2  3.61  1.05  73.2  0.57  8.24     0  0   \n 9     9             1.52  14.0  3.58  1.37  72.1  0.56  8.3      0  0   \n10    10             1.52  13    3.6   1.36  73.0  0.57  8.4      0  0.11\n# ℹ 204 more rows\n# ℹ 1 more variable: type_of_glass &lt;dbl&gt;\n\n\n\nStart a chain that would overwrite the Type_of_glass variable using mutate(). Create a character string version (that is, replace 1 with “building_windows_float_processed”, 2 with “building_win. . .”, etc.) instead (see the variable descriptions above to give meaningful values). (If you are familiar with factors, feel free to use that instead of a character string variable - otherwise, think if/then/else via ifelse().)\nContinue your chain and keep only observations where the Fe variable is less than 0.2 and the Type of Glass is either “tableware” or “headlamp”.\n\n\nglass_data &lt;- glass_data |&gt;\n  mutate(type_of_glass = ifelse(type_of_glass == 1, \"building_windows_float_processed\", ifelse(type_of_glass == 2, \"building_windows_non_float_processed\", ifelse(type_of_glass == 3, \"vehicle_windows_float_processed\", ifelse(type_of_glass == 4, \"vehicle_windows_non_float_processed\", ifelse(type_of_glass == 5, \"containers\", ifelse(type_of_glass == 6, \"tableware\", ifelse(type_of_glass == 7, \"headlamps\", \"other\")))))))) |&gt;\n  filter(Fe &lt; 0.2 & type_of_glass %in% c(\"tableware\", \"headlamps\"))"
  },
  {
    "objectID": "Reading Data with Tidyverse.html#yeast-data",
    "href": "Reading Data with Tidyverse.html#yeast-data",
    "title": "Reading Data with Tidyverse",
    "section": "Yeast Data",
    "text": "Yeast Data\nThe second data set is called yeast.data. You’ll need to open the raw data set to determine the type of delimiter. The data is available at: https://www4.stat.ncsu.edu/~online/datasets/yeast.data.\nThe yeast.data appears to be a fixed widths field data set.\n\nRead this data into R directly from the URL using functions from the tidyverse. Notice that the data doesn’t include column names - add those (in a manner of your choosing). Print out the tibble (just call the object name).\n\n\nyeast_data &lt;- read_fwf(\"https://www4.stat.ncsu.edu/~online/datasets/yeast.data\",\n                       fwf_widths(c(12,6,6,6,6,6,6,6,6,3), c(\"seq_name\", \"mcg\", \"gvh\", \"alm\", \"mit\", \"erl\", \"pox\", \"vac\", \"nuc\", \"class\")))\n\nRows: 1484 Columns: 10\n── Column specification ────────────────────────────────────────────────────────\n\nchr (2): seq_name, class\ndbl (8): mcg, gvh, alm, mit, erl, pox, vac, nuc\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n#Determine widths\n#ADT1_YEAST  0.58  0.61  0.47  0.13  0.50  0.00  0.48  0.22  MIT\n# 12,6,6,6,6,6,6,6,6,3\nyeast_data\n\n# A tibble: 1,484 × 10\n   seq_name     mcg   gvh   alm   mit   erl   pox   vac   nuc class\n   &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;\n 1 ADT1_YEAST  0.58  0.61  0.47  0.13   0.5   0    0.48  0.22 MIT  \n 2 ADT2_YEAST  0.43  0.67  0.48  0.27   0.5   0    0.53  0.22 MIT  \n 3 ADT3_YEAST  0.64  0.62  0.49  0.15   0.5   0    0.53  0.22 MIT  \n 4 AAR2_YEAST  0.58  0.44  0.57  0.13   0.5   0    0.54  0.22 NUC  \n 5 AATM_YEAST  0.42  0.44  0.48  0.54   0.5   0    0.48  0.22 MIT  \n 6 AATC_YEAST  0.51  0.4   0.56  0.17   0.5   0.5  0.49  0.22 CYT  \n 7 ABC1_YEAST  0.5   0.54  0.48  0.65   0.5   0    0.53  0.22 MIT  \n 8 BAF1_YEAST  0.48  0.45  0.59  0.2    0.5   0    0.58  0.34 NUC  \n 9 ABF2_YEAST  0.55  0.5   0.66  0.36   0.5   0    0.49  0.22 MIT  \n10 ABP1_YEAST  0.4   0.39  0.6   0.15   0.5   0    0.58  0.3  CYT  \n# ℹ 1,474 more rows\n\n\n\nStart a chain that removes the seq_name and nuc columns\nContinue your chain to add columns corresponding to the mean and median of each numeric variable (mcg, gvh, alm, mit, erl, pox, and vac) at each class grouping (see the across() function as we did in the dplyr video!).\n\n\nyeast_data &lt;- yeast_data |&gt;\n  select(-c(seq_name, nuc)) |&gt;\n  group_by(class) |&gt;\n  mutate(across(where(is.numeric), list(mean = mean, median = median), .names = \"{.col}_{.fn}\"))"
  },
  {
    "objectID": "Reading Data with Tidyverse.html#white-wine-data",
    "href": "Reading Data with Tidyverse.html#white-wine-data",
    "title": "Reading Data with Tidyverse",
    "section": "White Wine Data",
    "text": "White Wine Data\n\nThere is an excel version of the white wine data set available at https://www4.stat.ncsu.edu/~online/ datasets/white-wine.xlsx.\n\n• Download this file\n• Place it in a folder you know (such as your working directory for your project)\n• Import the data from the first sheet using the readxl package\n• Print out the tibble (just call the object name)\n\nlibrary(readxl)\nwhite_wine_data &lt;- read_excel(\"white-wine.xlsx\",\n                              sheet = excel_sheets(\"white-wine.xlsx\")[1])\nwhite_wine_data\n\n# A tibble: 4,898 × 12\n   `fixed acidity` `volatile acidity` `citric acid` `residual sugar` chlorides\n             &lt;dbl&gt;              &lt;dbl&gt;         &lt;dbl&gt;            &lt;dbl&gt;     &lt;dbl&gt;\n 1               7               0.27          0.36             20.7     0.045\n 2              63               0.3           0.34              1.6     0.049\n 3              81               0.28          0.4               6.9     0.05 \n 4              72               0.23          0.32              8.5     0.058\n 5              72               0.23          0.32              8.5     0.058\n 6              81               0.28          0.4               6.9     0.05 \n 7              62               0.32          0.16              7       0.045\n 8               7               0.27          0.36             20.7     0.045\n 9              63               0.3           0.34              1.6     0.049\n10              81               0.22          0.43              1.5     0.044\n# ℹ 4,888 more rows\n# ℹ 7 more variables: `free sulfur dioxide` &lt;dbl&gt;,\n#   `total sulfur dioxide` &lt;dbl&gt;, density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;,\n#   alcohol &lt;dbl&gt;, quality &lt;dbl&gt;\n\n\n\nWhen you print the data set out to the console, you may notice that some of the variable names are surrounded by backticks. This is because they are non-standard (they include a space in them). We can rename them in a number of ways. We’ll do it by reading in the variable names from the 2nd sheet of the same file.\n\n• Read in the data from the 2nd sheet. This should return a data frame with one column containing alternative versions of the variable names.\n• Grab that column and overwrite the current column names (colnames()) of your white wine tibble.\n\nwhite_wine_sheet2 &lt;- read_excel(\"white-wine.xlsx\",\n                              sheet = excel_sheets(\"white-wine.xlsx\")[2])\nwine_variables &lt;- white_wine_sheet2[[1]]\ncolnames(white_wine_data) &lt;- wine_variables\n\n\nLastly, add a column to this data set to indicate the wines are white. That is, add a column that has values of ‘white’ for every observation.\n\n\nwhite_wine_data &lt;- white_wine_data |&gt;\n  mutate(wine_type = \"white\")"
  },
  {
    "objectID": "Reading Data with Tidyverse.html#red-wine-data",
    "href": "Reading Data with Tidyverse.html#red-wine-data",
    "title": "Reading Data with Tidyverse",
    "section": "Red Wine Data",
    "text": "Red Wine Data\n\nThere is a semi-colon delimited version of the red wine data set available at https://www4.stat.ncsu.edu/~online/datasets/red-wine.csv.\n\n• Read this in using the readr package. Be careful that the columns are read in as the correct type!\n\nred_wine_data &lt;- read_delim(\"https://www4.stat.ncsu.edu/~online/datasets/red-wine.csv\",\n                            delim = \";\")\n\nRows: 1599 Columns: 12\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \";\"\ndbl (12): fixed acidity, volatile acidity, citric acid, residual sugar, chlo...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nred_wine_data #check if columns are the correct type\n\n# A tibble: 1,599 × 12\n   `fixed acidity` `volatile acidity` `citric acid` `residual sugar` chlorides\n             &lt;dbl&gt;              &lt;dbl&gt;         &lt;dbl&gt;            &lt;dbl&gt;     &lt;dbl&gt;\n 1             7.4               0.7           0                 1.9     0.076\n 2             7.8               0.88          0                 2.6     0.098\n 3             7.8               0.76          0.04              2.3     0.092\n 4            11.2               0.28          0.56              1.9     0.075\n 5             7.4               0.7           0                 1.9     0.076\n 6             7.4               0.66          0                 1.8     0.075\n 7             7.9               0.6           0.06              1.6     0.069\n 8             7.3               0.65          0                 1.2     0.065\n 9             7.8               0.58          0.02              2       0.073\n10             7.5               0.5           0.36              6.1     0.071\n# ℹ 1,589 more rows\n# ℹ 7 more variables: `free sulfur dioxide` &lt;dbl&gt;,\n#   `total sulfur dioxide` &lt;dbl&gt;, density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;,\n#   alcohol &lt;dbl&gt;, quality &lt;dbl&gt;\n\n\n• You should replace the variable names as done above\n\ncolnames(red_wine_data) &lt;- wine_variables\n\n• You should append a column denoting the type as “red”\n\nred_wine_data &lt;- red_wine_data |&gt;\n  mutate(wine_type = \"red\")"
  },
  {
    "objectID": "Reading Data with Tidyverse.html#combining-white-and-red-wine-data",
    "href": "Reading Data with Tidyverse.html#combining-white-and-red-wine-data",
    "title": "Reading Data with Tidyverse",
    "section": "Combining White and Red Wine Data",
    "text": "Combining White and Red Wine Data\n\nCombine these two data sets into one data set. They both have the exact same columns so this is an easy append task!\n\n• Use the dplyr::bind_rows() function (see the help) to create one tibble containing all of the wine data.\n\nwine_data &lt;- dplyr::bind_rows(white_wine_data, red_wine_data)\nwine_data\n\n# A tibble: 6,497 × 13\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1             7             0.27        0.36           20.7     0.045\n 2            63             0.3         0.34            1.6     0.049\n 3            81             0.28        0.4             6.9     0.05 \n 4            72             0.23        0.32            8.5     0.058\n 5            72             0.23        0.32            8.5     0.058\n 6            81             0.28        0.4             6.9     0.05 \n 7            62             0.32        0.16            7       0.045\n 8             7             0.27        0.36           20.7     0.045\n 9            63             0.3         0.34            1.6     0.049\n10            81             0.22        0.43            1.5     0.044\n# ℹ 6,487 more rows\n# ℹ 8 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;,\n#   wine_type &lt;chr&gt;\n\n\n\nStart a chain on your new combined data object to filter the data to only look at high-quality wines (quality &gt; 6.5) and wines that have a reasonable alcohol value (alcohol &lt; 132).\nContinue your chain to now sort the data from highest quality to lowest.\nContinue your chain to select only the variables that contain acid, the alcohol variable, the type variable, and the quality variable.\nContinue your chain to add the mean and standard deviation of the alcohol variable to the data set for each setting of the quality variable\n\n\nwine_data &lt;- wine_data |&gt;\n  filter(quality &gt; 6.5, alcohol &lt; 132) |&gt;\n  arrange(desc(quality)) |&gt;\n  select(contains(\"acid\"), alcohol, wine_type, quality) |&gt;\n  group_by(quality) |&gt;\n  mutate(alcohol_mean = mean(alcohol), alcohol_sd = sd(alcohol))\n\nwine_data\n\n# A tibble: 1,206 × 8\n# Groups:   quality [3]\n   fixed_acidity volatile_acidity citric_acid alcohol wine_type quality\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;       &lt;dbl&gt;\n 1            91             0.27        0.45     104 white           9\n 2            66             0.36        0.29     124 white           9\n 3            74             0.24        0.36     125 white           9\n 4            69             0.36        0.34     127 white           9\n 5            71             0.26        0.49     129 white           9\n 6            62             0.66        0.48     128 white           8\n 7            62             0.66        0.48     128 white           8\n 8            68             0.26        0.42     105 white           8\n 9            67             0.23        0.31     107 white           8\n10            67             0.23        0.31     107 white           8\n# ℹ 1,196 more rows\n# ℹ 2 more variables: alcohol_mean &lt;dbl&gt;, alcohol_sd &lt;dbl&gt;"
  }
]